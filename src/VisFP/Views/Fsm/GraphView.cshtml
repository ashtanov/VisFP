@model RGViewModel
<div>
    <table>
        <tr>
            <td>
                <div id="mynetwork">
                    <div class="vis-network" tabindex="900" style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
                        <canvas width="800" height="600" style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;"></canvas>
                        <div class="vis-manipulation" style="display: none;"></div>
                        <div class="vis-edit-mode" style="display: block;">
                            <div class="vis-button vis-edit vis-edit-mode" style="touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);">
                                <div class="vis-label">Edit</div>
                            </div>
                        </div>
                        <div class="vis-close" style="display: none; touch-action: pan-y;"></div>
                    </div>
                </div>
            </td>
            <td>
                <div class="panel-default">
                    <div class="panel-heading"><strong>Таблица переходов:</strong></div>
                </div>
                <ul class="list-group">
                    
                    @{ int i = 1;}
                    @foreach(var t in Model.Grammar.GetTransitionTable())
                    {
                        <li class="list-group-item"><strong>@(i++).&emsp;</strong> @t</li>
                    }
                </ul>

            </td>
        </tr>
    </table>

    <script>
        buildGraph(@Json.Serialize(Model.Graph));
    </script>
    @*<dl class="dl-horizontal"></dl>*@
</div>
@*<button onclick="saveGraph();">SaveCurrent</button>*@
